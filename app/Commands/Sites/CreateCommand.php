<?php

namespace App\Commands\Sites;

use App\Services\Shell;
use App\Site;
use App\SiteConfig;
use Illuminate\Support\Facades\File;
use LaravelZero\Framework\Commands\Command;
use function Laravel\Prompts\{
    text,
    select,
    multiselect
};

class CreateCommand extends Command
{
    /**
     * The signature of the command.
     *
     * @var string
     */
    protected $signature = 'site:create { --only-nginx : Only create SSL certificates and an Nginx configuration. }';

    /**
     * The description of the command.
     *
     * @var string
     */
    protected $description = 'Create a new site.';

    /**
     * The configuration options for the new site.
     *
     * @var SiteConfig
     */
    private SiteConfig $config;

    /**
     * Execute the console command.
     */
    public function handle(): void
    {
        if (shell_exec("which laravel") === null) {
            $this->error('Please run "composer global require laravel/installer"');
            return;
        }

        $this->getConfigForNewSite()
            ->prepareNginxConfiguration()
            ->createLaravelProject();
    }

    /**
     * Create the laravel project.
     *
     * @return void
     */
    private function createLaravelProject(): void
    {
        if (!$this->option('only-nginx')) {
            Shell::run('laravel', [...$this->config->getOptions(), '-n', 'new', $this->config->getName()]);
            $this->info('Your Laravel project has been created!');
        } else {
            $this->info('Your project has been created!');
        }
    }

    /**
     * Prepare configuration options.
     *
     * @return $this
     */
    private function getConfigForNewSite(): static
    {
        $stack = $this->getLaravelStackOptions();

        $this->config = (new SiteConfig)
            ->setFramework('Laravel')
            ->setOptions($stack)
            ->setSsl(select('Should this site use SSL?', ['No', 'Yes']))
            ->setName(text('What would you like to call this project?', 'my-awesome-project'))
            // autogenerated from the 4 questions above! :o
            ->setDomain()
            ->setUrl()
            ->setUsername()
            ->setCurrentDir()
            ->setProjectName()
            ->setProjectDirectory();

        Site::create([
            'name' => $this->config->getName(),
            'url' => $this->config->getUrl(),
            'path' => $this->config->getProjectDirectory(),
            'secure' => $this->config->isSsl(),
        ]);

        return $this;
    }

    /**
     * Prepare an nginx configuration.
     *
     * @return static
     */
    private function prepareNginxConfiguration(): static
    {
        $esp = getenv('HOME').'/.esp';
        $tmp_nginx = sprintf("%s/tmp/nginx", $esp);
        $easyrsa = sprintf("%s/easyrsa", $esp);

        // Copy stub to a temp directory so that we can work on it.
        $stub = $this->config->isSsl() ? $this->nginxSslConfStub() : $this->nginxNonSslConfStub();
        file_put_contents($tmp_nginx, $stub);

        // Replace all placeholders with proper values.
        File::replaceInFile(
            ['ESP_SERVER_NAME', 'ESP_USER', 'ESP_DIR'],
            [
                $this->config->getDomain(),
                $this->config->getUsername(),
                $this->config->getProjectDirectory(),
            ],
            $tmp_nginx
        );

        if ($this->config->isSsl()) {
            $this->call('make:certificate', ['domain' => $this->config->getDomain()]);

            File::replaceInFile(
                ['ESP_SSL_CERT', 'ESP_SSL_KEY'],
                [
                    sprintf('%s/pki/issued/%s.crt', $easyrsa, $this->config->getDomain()),
                    sprintf('%s/pki/private/%s.key', $easyrsa, $this->config->getDomain())
                ],
                $tmp_nginx
            );
        }

        // Move temp file to the nginx config dir (~/.esp/Nginx).
        File::move(
            $tmp_nginx,
            sprintf("%s/Nginx/%s.conf", $esp, $this->config->getProjectName())
        );

        chdir($this->config->getProjectDirectory());
        return $this;
    }

    /**
     * Build an array of options to create a laravel project.
     *
     * @return array
     */
    private function getLaravelStackOptions(): array
    {
        if ($this->option('only-nginx')) {
            return [];
        }

        $supported_frameworks = ['Plain', 'Breeze', 'Jetstream'];

        $fw = select('Which Laravel preset would you like to use?', $supported_frameworks, 'Breeze');

        $common_options = [
            '--pest' => 'Add Pest Test Framework',
            '--phpunit' => 'Add PHPUnit Test Framework',
            '--git' => 'Initialize Git Repo',
            '--branch' => 'Name your branch'
        ];

        $uncommon_options = [
            ...$common_options,
            '--dark' => 'Add Dark Mode support',
            '--ssr' => 'Add Server-Side Rendering support',
            '--stack=inertia' => 'Use InertiaJS stack',
            '--stack=blade' => 'Use Blade stack',
            '--stack=livewire' => 'Use Livewire stack',
        ];

        $jetstream_options = [
            ...$uncommon_options,
            '--api' => 'Add API support',
            '--teams' => 'Add Teams support',
            '--verification' => 'Add Email Verification support'
        ];

        $breeze_options = [
            ...$uncommon_options,
            '--typescript' => 'TypeScript',
        ];

        $stack = match ($fw) {
            'Breeze' => multiselect('Which Breeze options would you like?', $breeze_options, scroll: 9),
            'Jetstream' => multiselect('Which Jetstream options would you like?', $jetstream_options, scroll: 9),
            'Plain' => multiselect('Which options would you like?', $common_options, scroll: 9)
        };

        if (in_array('--branch', $stack)) {
            $branch_name = text('What would you like to call your branch?', 'dev', required: true);

            $position = array_search('--branch', $stack);
            $stack[$position] = sprintf('--branch=%s', $branch_name);
        }

        return $stack;
    }

    private function nginxNonSslConfStub(): string
    {
        return <<<'NGINXCONFIG'
server {
    listen 127.0.0.1:80;

    root ESP_DIR/public;
    server_name ESP_SERVER_NAME;

    index index.php;

    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header Content-Security-Policy "frame-ancestors 'self'";
    add_header X-Frame-Options DENY;
    add_header Referrer-Policy same-origin;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param PHP_VALUE "upload_max_filesize = 8192M \n post_max_size=8192M";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTP_PROXY "";
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        include /etc/nginx/fastcgi_params;

        fastcgi_pass unix:/home/ESP_USER/.php8.2-fpm.sock;
    }

    location ~ /\.ht {
       deny all;
    }
}
NGINXCONFIG;
    }

    private function nginxSslConfStub(): string
    {
        return <<<'NGINXCONFIG'
server {
    listen 127.0.0.1:80;
    server_name ESP_SERVER_NAME;
    return 301 https://ESP_SERVER_NAME$query_string;
}

server {
    listen 127.0.0.1:443 ssl http2;
    server_name ESP_SERVER_NAME;

    root ESP_DIR/public;
    index index.php;

    ssl_certificate         ESP_SSL_CERT;
    ssl_certificate_key     ESP_SSL_KEY;
    ssl_protocols           TLSv1.2 TLSv1.3;
    ssl_dhparam             /etc/nginx/dhparam.pem;
    ssl_session_timeout     10m;
    ssl_session_cache       shared:SSL:10m;
    ssl_session_tickets     off;
    ssl_ciphers "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384";
    ssl_prefer_server_ciphers on;

    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
    add_header Content-Security-Policy "frame-ancestors 'self'";
    add_header X-Frame-Options DENY;
    add_header Referrer-Policy same-origin;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param PHP_VALUE "upload_max_filesize = 8192M \n post_max_size=8192M";
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param HTTP_PROXY "";
        fastcgi_intercept_errors off;
        fastcgi_buffer_size 16k;
        fastcgi_buffers 4 16k;
        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        include /etc/nginx/fastcgi_params;

        fastcgi_pass unix:/home/ESP_USER/.php8.2-fpm.sock;
    }

    location ~ /\.ht {
        deny all;
    }
}
NGINXCONFIG;
    }
}
